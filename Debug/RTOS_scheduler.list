
RTOS_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000d8c  08000d8c  00010d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dac  08000dac  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000dac  08000dac  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dac  08000dac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005088  20000018  08000dcc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050a0  08000dcc  000250a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001147  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000752  00000000  00000000  000211d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000154  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ecd  00000000  00000000  00021c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ca0  00000000  00000000  00022b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003fe4  00000000  00000000  000237c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000564  00000000  00000000  000277a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00027d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d74 	.word	0x08000d74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000d74 	.word	0x08000d74

080001d4 <GPIO_voidSetPin>:

/* An array to collect all my GPIOs */
static GPIO_MemMap_t* GPIO_PORT [MAX_PORTS_NUMBER] = {GPIOA , GPIOB , GPIOC };

void GPIO_voidSetPin( PORT_ID Port_ID , PIN_ID PinNum , u8 value )
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]

	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b03      	cmp	r3, #3
 80001ea:	d82a      	bhi.n	8000242 <GPIO_voidSetPin+0x6e>
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b10      	cmp	r3, #16
 80001f0:	d827      	bhi.n	8000242 <GPIO_voidSetPin+0x6e>
	{
		/* Do nothing */
	}else
	{
		if( value == SET )
 80001f2:	797b      	ldrb	r3, [r7, #5]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d110      	bne.n	800021a <GPIO_voidSetPin+0x46>
		{

			SET_BIT( (GPIO_PORT[Port_ID]->ODR) , PinNum );
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4a15      	ldr	r2, [pc, #84]	; (8000250 <GPIO_voidSetPin+0x7c>)
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	695a      	ldr	r2, [r3, #20]
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	2101      	movs	r1, #1
 8000206:	fa01 f303 	lsl.w	r3, r1, r3
 800020a:	4618      	mov	r0, r3
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4910      	ldr	r1, [pc, #64]	; (8000250 <GPIO_voidSetPin+0x7c>)
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	4302      	orrs	r2, r0
 8000216:	615a      	str	r2, [r3, #20]
		}
	}



}
 8000218:	e013      	b.n	8000242 <GPIO_voidSetPin+0x6e>
		}else if( value == RESET )
 800021a:	797b      	ldrb	r3, [r7, #5]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d110      	bne.n	8000242 <GPIO_voidSetPin+0x6e>
			CLEAR_BIT( GPIO_PORT[Port_ID]->ODR , PinNum );
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <GPIO_voidSetPin+0x7c>)
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	4618      	mov	r0, r3
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4905      	ldr	r1, [pc, #20]	; (8000250 <GPIO_voidSetPin+0x7c>)
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	4002      	ands	r2, r0
 8000240:	615a      	str	r2, [r3, #20]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000

08000254 <GPIO_voidPinMode>:


void GPIO_voidPinMode( PORT_ID Port_ID , PIN_ID PinNum , MODE mode )
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	460b      	mov	r3, r1
 8000260:	71bb      	strb	r3, [r7, #6]
 8000262:	4613      	mov	r3, r2
 8000264:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b03      	cmp	r3, #3
 800026a:	d81a      	bhi.n	80002a2 <GPIO_voidPinMode+0x4e>
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	2b10      	cmp	r3, #16
 8000270:	d817      	bhi.n	80002a2 <GPIO_voidPinMode+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->MODER) = ( (GPIO_PORT[Port_ID]->MODER) & (~(0b11 << 2*PinNum)) ) | ( mode << 2*PinNum );
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <GPIO_voidPinMode+0x5c>)
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	2103      	movs	r1, #3
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	7979      	ldrb	r1, [r7, #5]
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	4618      	mov	r0, r3
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4905      	ldr	r1, [pc, #20]	; (80002b0 <GPIO_voidPinMode+0x5c>)
 800029a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029e:	4302      	orrs	r2, r0
 80002a0:	601a      	str	r2, [r3, #0]
	}

}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <GPIO_voidPinOutputMode>:

	return value;
}

void GPIO_voidPinOutputMode(  PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_MODE mode )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
 80002be:	460b      	mov	r3, r1
 80002c0:	71bb      	strb	r3, [r7, #6]
 80002c2:	4613      	mov	r3, r2
 80002c4:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	d812      	bhi.n	80002f2 <GPIO_voidPinOutputMode+0x3e>
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b10      	cmp	r3, #16
 80002d0:	d80f      	bhi.n	80002f2 <GPIO_voidPinOutputMode+0x3e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OTYPER) = (GPIO_PORT[Port_ID]->OTYPER) | (mode << PinNum) ;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <GPIO_voidPinOutputMode+0x4c>)
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	7979      	ldrb	r1, [r7, #5]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4905      	ldr	r1, [pc, #20]	; (8000300 <GPIO_voidPinOutputMode+0x4c>)
 80002ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ee:	4302      	orrs	r2, r0
 80002f0:	605a      	str	r2, [r3, #4]
	}

}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000000 	.word	0x20000000

08000304 <GPIO_voidOutputSpeed>:

void GPIO_voidOutputSpeed( PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_SPEED speed )
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	460b      	mov	r3, r1
 8000310:	71bb      	strb	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d81a      	bhi.n	8000352 <GPIO_voidOutputSpeed+0x4e>
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b10      	cmp	r3, #16
 8000320:	d817      	bhi.n	8000352 <GPIO_voidOutputSpeed+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OSPEEDR) = ( (GPIO_PORT[Port_ID]->OSPEEDR) & (~(0b11 << 2*PinNum)) ) | ( speed << 2*PinNum );
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <GPIO_voidOutputSpeed+0x5c>)
 8000326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	2103      	movs	r1, #3
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	401a      	ands	r2, r3
 800033a:	7979      	ldrb	r1, [r7, #5]
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	4618      	mov	r0, r3
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <GPIO_voidOutputSpeed+0x5c>)
 800034a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800034e:	4302      	orrs	r2, r0
 8000350:	609a      	str	r2, [r3, #8]
	}

}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000

08000364 <GPIO_void_PullType>:

void GPIO_void_PullType( PORT_ID Port_ID , PIN_ID PinNum , PULL_TYPE Pull_type )
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	460b      	mov	r3, r1
 8000370:	71bb      	strb	r3, [r7, #6]
 8000372:	4613      	mov	r3, r2
 8000374:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d81a      	bhi.n	80003b2 <GPIO_void_PullType+0x4e>
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b10      	cmp	r3, #16
 8000380:	d817      	bhi.n	80003b2 <GPIO_void_PullType+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->PUPDR) = ( (GPIO_PORT[Port_ID]->PUPDR) & (~(0b11 << 2*PinNum)) ) | ( Pull_type << 2*PinNum );
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <GPIO_void_PullType+0x5c>)
 8000386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	79ba      	ldrb	r2, [r7, #6]
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	2103      	movs	r1, #3
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	43d2      	mvns	r2, r2
 8000398:	401a      	ands	r2, r3
 800039a:	7979      	ldrb	r1, [r7, #5]
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4905      	ldr	r1, [pc, #20]	; (80003c0 <GPIO_void_PullType+0x5c>)
 80003aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ae:	4302      	orrs	r2, r0
 80003b0:	60da      	str	r2, [r3, #12]
	}

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000

080003c4 <GPIO_setAlternativeFunction>:
	return value;

}

void GPIO_setAlternativeFunction( PORT_ID port_id , PIN_ID pin_id , ALTERNATIVE_FUNCTION altternative_fun )
{
 80003c4:	b490      	push	{r4, r7}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
 80003ce:	460b      	mov	r3, r1
 80003d0:	71bb      	strb	r3, [r7, #6]
 80003d2:	4613      	mov	r3, r2
 80003d4:	717b      	strb	r3, [r7, #5]
	if( port_id > MAX_PORTS_NUMBER  || pin_id > MAX_PINS_NUMBER )
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d82b      	bhi.n	8000434 <GPIO_setAlternativeFunction+0x70>
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	2b10      	cmp	r3, #16
 80003e0:	d828      	bhi.n	8000434 <GPIO_setAlternativeFunction+0x70>
	{
		/* Do nothing */
	}else
	{
		u8 bit_num = (pin_id % 8U)*4U ;
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	73fb      	strb	r3, [r7, #15]
		(GPIO_PORT[port_id]->AFR[pin_id/8U]) = ( (GPIO_PORT[port_id]->AFR[pin_id/8U]) & ( ~( (0b1111) << (bit_num) ) ) ) | ( (altternative_fun) <<  (bit_num) ) ;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <GPIO_setAlternativeFunction+0x7c>)
 80003f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	08d2      	lsrs	r2, r2, #3
 80003fa:	b2d2      	uxtb	r2, r2
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	7bfa      	ldrb	r2, [r7, #15]
 8000404:	210f      	movs	r1, #15
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	401a      	ands	r2, r3
 800040e:	7979      	ldrb	r1, [r7, #5]
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	461c      	mov	r4, r3
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4909      	ldr	r1, [pc, #36]	; (8000440 <GPIO_setAlternativeFunction+0x7c>)
 800041c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000420:	79b9      	ldrb	r1, [r7, #6]
 8000422:	08c9      	lsrs	r1, r1, #3
 8000424:	b2c9      	uxtb	r1, r1
 8000426:	4608      	mov	r0, r1
 8000428:	ea42 0104 	orr.w	r1, r2, r4
 800042c:	f100 0208 	add.w	r2, r0, #8
 8000430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bc90      	pop	{r4, r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000

08000444 <GPIO_voidInti>:
 * @brief This function initialize GPIO pin according
 * @param[in] pin_config : A struct contains the initialization values
 * @retval void
 *********************************************************************************/
void GPIO_voidInti( const GPIO_PIN_CONFIG_T *pin_config )
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	PORT_ID port_id  = pin_config->port_id;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	73fb      	strb	r3, [r7, #15]
	PIN_ID pin_id    = pin_config->pin_id;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	73bb      	strb	r3, [r7, #14]

	/* Pin Mode */
	GPIO_voidPinMode( port_id , pin_id ,pin_config->mode );
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	7bb9      	ldrb	r1, [r7, #14]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fef7 	bl	8000254 <GPIO_voidPinMode>

	/* Pull type */
	GPIO_void_PullType( port_id , pin_id , pin_config->pull_type );
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	78da      	ldrb	r2, [r3, #3]
 800046a:	7bb9      	ldrb	r1, [r7, #14]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff78 	bl	8000364 <GPIO_void_PullType>

	if( (pin_config->mode) == GPIO_INPUT || (pin_config->mode) == GPIO_ANALOG_MODE ) /* Input or Analog */
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d02f      	beq.n	80004dc <GPIO_voidInti+0x98>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d02b      	beq.n	80004dc <GPIO_voidInti+0x98>
	{

		/* DO NOTHING */

	}else if( (pin_config->mode) == GPIO_OUTPUT ) /* Output */
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10e      	bne.n	80004aa <GPIO_voidInti+0x66>
	{
		/* Output mode */
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791a      	ldrb	r2, [r3, #4]
 8000490:	7bb9      	ldrb	r1, [r7, #14]
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff0d 	bl	80002b4 <GPIO_voidPinOutputMode>

		/* Output speed */
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795a      	ldrb	r2, [r3, #5]
 800049e:	7bb9      	ldrb	r1, [r7, #14]
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff2e 	bl	8000304 <GPIO_voidOutputSpeed>

		/* ALlternative fun */
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
	}

}
 80004a8:	e018      	b.n	80004dc <GPIO_voidInti+0x98>
	}else if( (pin_config->mode) == GPIO_ALTERNATIVE_FUNCTION )  /* Alternative function */
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	789b      	ldrb	r3, [r3, #2]
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d114      	bne.n	80004dc <GPIO_voidInti+0x98>
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791a      	ldrb	r2, [r3, #4]
 80004b6:	7bb9      	ldrb	r1, [r7, #14]
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff fefa 	bl	80002b4 <GPIO_voidPinOutputMode>
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795a      	ldrb	r2, [r3, #5]
 80004c4:	7bb9      	ldrb	r1, [r7, #14]
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff1b 	bl	8000304 <GPIO_voidOutputSpeed>
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	799a      	ldrb	r2, [r3, #6]
 80004d2:	7bb9      	ldrb	r1, [r7, #14]
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff74 	bl	80003c4 <GPIO_setAlternativeFunction>
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <OS_Init>:
u8 g_SRAM_Arr[TOTAL_SRAM_SIZE]; /* Reserve a memory in RAM for Tasks, g_SRAM_Arr pointer is the start of our SRAM */
u32 g_SRAM_End =  (u32)( &(g_SRAM_Arr[TOTAL_SRAM_SIZE ]) ); /* End of the stack */

/* Initialize OS */
void OS_Init( void (*a_IdelTaskHandler)(void) )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	/*** Init Idel Task ***/
	UserTasks[0].TaskStackStart =  g_SRAM_End ;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <OS_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <OS_Init+0x44>)
 80004f2:	6113      	str	r3, [r2, #16]
	/* Initialize PSP values of Idle Tasks */
	UserTasks[0].TaskPSP = g_SRAM_End;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <OS_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <OS_Init+0x44>)
 80004fa:	6093      	str	r3, [r2, #8]
	/* Initialize Idle Task Handler */
	UserTasks[0].TaskHandler = a_IdelTaskHandler;
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <OS_Init+0x44>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60d3      	str	r3, [r2, #12]
	UserTasks[0].TaskState = READY; /* Idle Task is always ready */
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <OS_Init+0x44>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
	Stack_voidInitTaskStack(); /* Init Idle Task stack */
 8000508:	f000 fa0e 	bl	8000928 <Stack_voidInitTaskStack>

	/*** Init Scheduler ***/
	Stack_voidSchedulerStackInit( SCHEDULER_STACK_START );
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <OS_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f9eb 	bl	80008f0 <Stack_voidSchedulerStackInit>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000010 	.word	0x20000010
 8000528:	20005034 	.word	0x20005034

0800052c <OS_CreateTask>:



/* A Function used to create a Task during run time */
u8 OS_CreateTask( u32 a_task_stack_size , void (*a_Task_handler)(void)  )
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	/* Increment Task number */
	g_TasksNumber++;
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <OS_CreateTask+0xc4>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <OS_CreateTask+0xc4>)
 8000540:	701a      	strb	r2, [r3, #0]

	/* If the number of Tasks reaches it's maximum */
	if( g_TasksNumber >= MAX_TASKS_NUM )
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <OS_CreateTask+0xc4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d901      	bls.n	800054e <OS_CreateTask+0x22>
	{
		return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e04c      	b.n	80005e8 <OS_CreateTask+0xbc>
	}

	UserTasks[g_TasksNumber].TaskStackStart =  ( (g_SRAM_End) - ( g_UsedStackSize ) ) ;
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <OS_CreateTask+0xc8>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <OS_CreateTask+0xcc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4926      	ldr	r1, [pc, #152]	; (80005f0 <OS_CreateTask+0xc4>)
 8000558:	7809      	ldrb	r1, [r1, #0]
 800055a:	4608      	mov	r0, r1
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	4927      	ldr	r1, [pc, #156]	; (80005fc <OS_CreateTask+0xd0>)
 8000560:	4603      	mov	r3, r0
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4403      	add	r3, r0
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	440b      	add	r3, r1
 800056a:	3310      	adds	r3, #16
 800056c:	601a      	str	r2, [r3, #0]
	g_UsedStackSize += a_task_stack_size;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <OS_CreateTask+0xcc>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <OS_CreateTask+0xcc>)
 8000578:	6013      	str	r3, [r2, #0]

	/* If I used all the size of my stack */
	if( g_UsedStackSize > TOTAL_SRAM_SIZE )
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <OS_CreateTask+0xcc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000582:	d901      	bls.n	8000588 <OS_CreateTask+0x5c>
	{
		return 0;
 8000584:	2300      	movs	r3, #0
 8000586:	e02f      	b.n	80005e8 <OS_CreateTask+0xbc>
	}

	/* Initialize PSP values of Tasks */
	UserTasks[g_TasksNumber].TaskPSP = UserTasks[g_TasksNumber].TaskStackStart;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <OS_CreateTask+0xc4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <OS_CreateTask+0xc4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <OS_CreateTask+0xd0>)
 8000596:	460b      	mov	r3, r1
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	440b      	add	r3, r1
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4915      	ldr	r1, [pc, #84]	; (80005fc <OS_CreateTask+0xd0>)
 80005a6:	4603      	mov	r3, r0
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4403      	add	r3, r0
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	3308      	adds	r3, #8
 80005b2:	601a      	str	r2, [r3, #0]

	/* Initialize Task Handlers */
	UserTasks[g_TasksNumber].TaskHandler = a_Task_handler;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <OS_CreateTask+0xc4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <OS_CreateTask+0xd0>)
 80005bc:	460b      	mov	r3, r1
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	440b      	add	r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	330c      	adds	r3, #12
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	601a      	str	r2, [r3, #0]
	/* Each Task starts in Ready state */
	UserTasks[g_TasksNumber].TaskState = READY;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <OS_CreateTask+0xc4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <OS_CreateTask+0xd0>)
 80005d4:	460b      	mov	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]

	Stack_voidInitTaskStack(); /* Initialize the Stack of the Task */
 80005e2:	f000 f9a1 	bl	8000928 <Stack_voidInitTaskStack>

	return 1;
 80005e6:	2301      	movs	r3, #1

}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000509c 	.word	0x2000509c
 80005f4:	20000010 	.word	0x20000010
 80005f8:	2000000c 	.word	0x2000000c
 80005fc:	20005034 	.word	0x20005034

08000600 <OS_TaskDelay>:


/* A function that make a delay using kernal, to save CPU clocks */
void OS_TaskDelay(u32 a_delay )
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if( g_currentTask != 0 ) /* Check that the current Task is not the Idle Task */
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <OS_TaskDelay+0x74>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d02b      	beq.n	8000668 <OS_TaskDelay+0x68>
	{
		ENTER_CRITICAL_SECTION(); /* used to close Exception because it's a critical section */
 8000610:	b401      	push	{r0}
 8000612:	f04f 0001 	mov.w	r0, #1
 8000616:	f380 8810 	msr	PRIMASK, r0
 800061a:	bc01      	pop	{r0}
		UserTasks[g_currentTask].BlockingCount = a_delay + g_GlobalTickCount ; /* The blocking count contains number of ticks the task wants to wait + the current tick number */
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <OS_TaskDelay+0x78>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <OS_TaskDelay+0x74>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	441a      	add	r2, r3
 800062a:	4914      	ldr	r1, [pc, #80]	; (800067c <OS_TaskDelay+0x7c>)
 800062c:	4603      	mov	r3, r0
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4403      	add	r3, r0
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3304      	adds	r3, #4
 8000638:	601a      	str	r2, [r3, #0]
		UserTasks[g_currentTask].TaskState = BLOCKING; /* Change the state of task to blocking state */
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <OS_TaskDelay+0x74>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <OS_TaskDelay+0x7c>)
 8000642:	460b      	mov	r3, r1
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	440b      	add	r3, r1
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
		SET_BIT( SCB_ICSR , 28 ); /* Setting PendSV pending bit to switch to another Task*/
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <OS_TaskDelay+0x80>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <OS_TaskDelay+0x80>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6013      	str	r3, [r2, #0]
		EXIT_CRITICAL_SECTION();
 800065c:	b401      	push	{r0}
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	f380 8810 	msr	PRIMASK, r0
 8000666:	bc01      	pop	{r0}
	}

}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	20000014 	.word	0x20000014
 8000678:	20005098 	.word	0x20005098
 800067c:	20005034 	.word	0x20005034
 8000680:	e000ed04 	.word	0xe000ed04

08000684 <OS_StartScheduler>:

/* Initialize Scheduler */
void OS_StartScheduler( u32 a_TickCounts )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	/*** Init Systick ***/
	SYSTICK_voidInit(a_TickCounts);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f837 	bl	8000700 <SYSTICK_voidInit>
	ChangeToPSP();
 8000692:	f000 f931 	bl	80008f8 <ChangeToPSP>

	UserTasks[1].TaskHandler();  /* Start with Task1 */
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <OS_StartScheduler+0x20>)
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	4798      	blx	r3
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005034 	.word	0x20005034

080006a8 <SVC_Handler>:

/* SVC Handler  */
__attribute__ ((naked)) void SVC_Handler(void) /* Make function naked to avoid the first instructions that uses the stack at the begining of function */
{
	/* MRS is an instruction to read special register */
	__asm volatile("MRS R0 , MSP" ); /* Get MSP value and put it in R0 as an argument */
 80006a8:	f3ef 8008 	mrs	r0, MSP

	__asm volatile("B SVC_Handeler_C"); /* Branch to void SVC_Handeler_C function */
 80006ac:	f000 b801 	b.w	80006b2 <SVC_Handeler_C>
}
 80006b0:	bf00      	nop

080006b2 <SVC_Handeler_C>:

/* SVC Handler in C */
void SVC_Handeler_C( u32 *a_MSP_value )
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	/* a_MSP_value    ==> address of place that contains (R0,PC,...)
	 * (*a_MSP_value) ==> Register value (R0,PC,...)
	 **/
	a_MSP_value += 6; /* ADD 6 steps to point to the address of PC */
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3318      	adds	r3, #24
 80006be:	607b      	str	r3, [r7, #4]
	u16 *PC_value = (u16 *)(*a_MSP_value); /* Get PC value */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
	PC_value -= 1; /* Get the previous address in PC that is SVC instruction*/
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3b02      	subs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
	u8 SVC_value = *PC_value; /* Get SVC value */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	72fb      	strb	r3, [r7, #11]

	/* Put your cases her */
	switch(SVC_value)
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00b      	beq.n	80006f0 <SVC_Handeler_C+0x3e>
 80006d8:	2b05      	cmp	r3, #5
 80006da:	d000      	beq.n	80006de <SVC_Handeler_C+0x2c>

		break;

	}

}
 80006dc:	e009      	b.n	80006f2 <SVC_Handeler_C+0x40>
		a_MSP_value -= 6; /* The stack will point to R0 */
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3b18      	subs	r3, #24
 80006e2:	607b      	str	r3, [r7, #4]
		(*a_MSP_value) = SVC_value*2 ;/* Put the value that you want to return (10)  */
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
		break;
 80006ee:	e000      	b.n	80006f2 <SVC_Handeler_C+0x40>
		break;
 80006f0:	bf00      	nop
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <SYSTICK_voidInit>:
u8  g_TasksNumber=0; /* Contains the number of initialized Tasks in our system */


/* Initialize Systick timer */
void SYSTICK_voidInit(u32 a_number_of_delay_ticks )
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	STK_LOAD = a_number_of_delay_ticks -1; /* Put the number of ticks in reload value */
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <SYSTICK_voidInit+0x40>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3b01      	subs	r3, #1
 800070e:	6013      	str	r3, [r2, #0]
	SET_BIT( STK_CTRL , TICKINT );  /* Open exception */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <SYSTICK_voidInit+0x44>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <SYSTICK_voidInit+0x44>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	6013      	str	r3, [r2, #0]

#if ( SYSTICK_CLOCK == AHB_DIV_8 )
	CLEAR_BIT( STK_CTRL , CLKSOURCE );
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <SYSTICK_voidInit+0x44>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <SYSTICK_voidInit+0x44>)
 8000722:	f023 0304 	bic.w	r3, r3, #4
 8000726:	6013      	str	r3, [r2, #0]
#else
	SET_BIT( STK_CTRL , CLKSOURCE );
#endif

	SET_BIT( STK_CTRL , ENABLE ); /* Enable timer */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SYSTICK_voidInit+0x44>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SYSTICK_voidInit+0x44>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000e014 	.word	0xe000e014
 8000744:	e000e010 	.word	0xe000e010

08000748 <HelperFun_SavePSP_value>:
}



static void HelperFun_SavePSP_value(u32 a_PSP_Value )
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	UserTasks[g_currentTask].TaskPSP = a_PSP_Value;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HelperFun_SavePSP_value+0x2c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HelperFun_SavePSP_value+0x30>)
 8000758:	460b      	mov	r3, r1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	3308      	adds	r3, #8
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	601a      	str	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000014 	.word	0x20000014
 8000778:	20005034 	.word	0x20005034

0800077c <HelperFun_IncrementCurrentTask>:

static void HelperFun_IncrementCurrentTask(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
	g_currentTask = ( (g_currentTask+1) % (g_TasksNumber+1) ) ;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <HelperFun_IncrementCurrentTask+0x8c>)
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	3201      	adds	r2, #1
 800078e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000792:	fb01 f202 	mul.w	r2, r1, r2
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 800079c:	701a      	strb	r2, [r3, #0]
	for( u8 i=0 ; i<g_TasksNumber+1 ; i++ )
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e020      	b.n	80007e6 <HelperFun_IncrementCurrentTask+0x6a>
	{
		if( UserTasks[g_currentTask].TaskState == READY && g_currentTask != 0 ) /* The Task is in Ready state and Task is not Idle task */
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <HelperFun_IncrementCurrentTask+0x90>)
 80007ac:	460b      	mov	r3, r1
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <HelperFun_IncrementCurrentTask+0x48>
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d119      	bne.n	80007f8 <HelperFun_IncrementCurrentTask+0x7c>
			return;
		g_currentTask = ( (g_currentTask+1) % (g_TasksNumber+1) ) ;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HelperFun_IncrementCurrentTask+0x8c>)
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	3201      	adds	r2, #1
 80007d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80007d4:	fb01 f202 	mul.w	r2, r1, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 80007de:	701a      	strb	r2, [r3, #0]
	for( u8 i=0 ; i<g_TasksNumber+1 ; i++ )
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	3301      	adds	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HelperFun_IncrementCurrentTask+0x8c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d9d9      	bls.n	80007a4 <HelperFun_IncrementCurrentTask+0x28>

	}
	g_currentTask = 0; /* All Tasks are in Blocking state, so run Idle Task */
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HelperFun_IncrementCurrentTask+0x88>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e000      	b.n	80007fa <HelperFun_IncrementCurrentTask+0x7e>
			return;
 80007f8:	bf00      	nop


}
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	20000014 	.word	0x20000014
 8000808:	2000509c 	.word	0x2000509c
 800080c:	20005034 	.word	0x20005034

08000810 <unblockTasks>:

/* Function used to unblock the Tasks that it's blocking time is finished */
static void unblockTasks(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	for(u8 i=1 ; i<MAX_TASKS_NUM ; i++)
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e022      	b.n	8000862 <unblockTasks+0x52>
	{
		if( UserTasks[i].TaskState == BLOCKING ) /* The Task is in Blocking state */
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	4916      	ldr	r1, [pc, #88]	; (8000878 <unblockTasks+0x68>)
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d115      	bne.n	800085c <unblockTasks+0x4c>
			if( UserTasks[i].BlockingCount == g_GlobalTickCount ) /* The Task reaches the blocking count */
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	4911      	ldr	r1, [pc, #68]	; (8000878 <unblockTasks+0x68>)
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	3304      	adds	r3, #4
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <unblockTasks+0x6c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d108      	bne.n	800085c <unblockTasks+0x4c>
			{
				UserTasks[i].TaskState = READY;
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	490a      	ldr	r1, [pc, #40]	; (8000878 <unblockTasks+0x68>)
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
	for(u8 i=1 ; i<MAX_TASKS_NUM ; i++)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3301      	adds	r3, #1
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d9d9      	bls.n	800081c <unblockTasks+0xc>
			}
	}
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20005034 	.word	0x20005034
 800087c:	20005098 	.word	0x20005098

08000880 <SysTick_Handler>:

/* ISR of SYSTICK */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0


	/* Increment global Tick count */
	g_GlobalTickCount++;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <SysTick_Handler+0x24>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <SysTick_Handler+0x24>)
 800088c:	6013      	str	r3, [r2, #0]

	/* unblock Tasks that it's blocking time is finished  */
	unblockTasks();
 800088e:	f7ff ffbf 	bl	8000810 <unblockTasks>

	/* Trigger PendSV */
	SET_BIT( SCB_ICSR , 28 ); /* Setting PendSV pending bit */
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Handler+0x28>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <SysTick_Handler+0x28>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6013      	str	r3, [r2, #0]


}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20005098 	.word	0x20005098
 80008a8:	e000ed04 	.word	0xe000ed04

080008ac <PendSV_Handler>:

/* PendSV Handler, which will make context switching */
__attribute__ ((naked)) void PendSV_Handler(void)
{
	/*** Save context of current Task ***/
	__asm__ volatile("MRS R0,PSP");  /* Save values of PSP in R0 */
 80008ac:	f3ef 8009 	mrs	r0, PSP
	/* We are in Scheduler exception, so we can't use PSP as SP, we will use MSP, so I can't use push instruction */
	__asm__ volatile("STMDB R0! , {R4-R11} "); /* STMDB mean store multiple registers with decrement each time,
 80008b0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	                                              ! means at the end store the final address back to R0, which will be the final value of PSP */
	__asm__ volatile("PUSH {LR}"); /* I will enter a function, so I should save value of LR in stack */
 80008b4:	b500      	push	{lr}
	__asm__ volatile("BL HelperFun_SavePSP_value"); /* Save PSP value in global array */
 80008b6:	f7ff ff47 	bl	8000748 <HelperFun_SavePSP_value>

	/*** Retrieve context of next Task  ***/
	__asm__ volatile("BL HelperFun_IncrementCurrentTask"); /* Increment currentTask global variable */
 80008ba:	f7ff ff5f 	bl	800077c <HelperFun_IncrementCurrentTask>
	__asm__ volatile("MOV R0,%0" :: "r" (UserTasks[g_currentTask].TaskPSP) ); /* Get PSP value of this task */
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <PendSV_Handler+0x3c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <PendSV_Handler+0x40>)
 80008c6:	460b      	mov	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
	__asm__ volatile("LDMIA R0! , {R4-R11} "); /* LDMIA mean Load multiple registers with increment each time,
 80008d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	   	                                                ! means at the end store the final address back to R0, which will be the final value of PSP */
	__asm__ volatile("MSR PSP,R0"); /* Put PSP value of the next task in PSP register */
 80008da:	f380 8809 	msr	PSP, r0
	__asm__ volatile("POP {LR}"); /* Get value of the pushed LR */
 80008de:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm__ volatile("BX LR"); /* Exit */
 80008e2:	4770      	bx	lr
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	20000014 	.word	0x20000014
 80008ec:	20005034 	.word	0x20005034

080008f0 <Stack_voidSchedulerStackInit>:

/* This function will change MSP register, so it should be naked because it will be assembly only */
__attribute__ ((naked)) void Stack_voidSchedulerStackInit( u32 a_ShedulerSatckTop )
{
	//	__asm__ volatile(" MSR MSP , %0 "::"r"(a_ShedulerSatckTop) );
	__asm__ volatile("MSR MSP,R0"); /* The argument is saved in R0 */
 80008f0:	f380 8808 	msr	MSP, r0
	__asm__ volatile("BX LR"); /* return to LR address */
 80008f4:	4770      	bx	lr
}
 80008f6:	bf00      	nop

080008f8 <ChangeToPSP>:
/* Function used to initialize PSP register with the PSP value of First task, then switch from MSP to PSP */
__attribute__ ((naked)) void ChangeToPSP(void)
{

	/* Initialize PSP before switching to it with Task1 */
	__asm__ volatile ( "MOV R0,%0" :: "r" (UserTasks[g_currentTask].TaskPSP) ); /* Put PSP value in R0 */
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <ChangeToPSP+0x28>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <ChangeToPSP+0x2c>)
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
	__asm__ volatile ("MSR PSP,R0"); /* Move R0 value to PSP */
 8000910:	f380 8809 	msr	PSP, r0

	/* Change SP to PSP */
	__asm__ volatile ("MOV R0,#0x02");
 8000914:	f04f 0002 	mov.w	r0, #2
	__asm__ volatile ("MSR CONTROL,R0"); /* Change bit one to 1 in CONTROL register to switch to PSP */
 8000918:	f380 8814 	msr	CONTROL, r0

	/* Branch */
	__asm__ volatile ("BX LR");
 800091c:	4770      	bx	lr

}
 800091e:	bf00      	nop
 8000920:	20000014 	.word	0x20000014
 8000924:	20005034 	.word	0x20005034

08000928 <Stack_voidInitTaskStack>:


/* Initialize Tasks stack */
void Stack_voidInitTaskStack( void )
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	u32 * Local_pointer ;

	Local_pointer = (u32*)(UserTasks[g_TasksNumber].TaskPSP);
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <Stack_voidInitTaskStack+0x11c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	4a44      	ldr	r2, [pc, #272]	; (8000a48 <Stack_voidInitTaskStack+0x120>)
 8000936:	460b      	mov	r3, r1
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	440b      	add	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	3308      	adds	r3, #8
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	607b      	str	r3, [r7, #4]
	Local_pointer--;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b04      	subs	r3, #4
 800094a:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = DUMMY_XPSR;      /* Initialize first place in Task stack which will save the value of XPSR */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000952:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b04      	subs	r3, #4
 8000958:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = (u32)UserTasks[g_TasksNumber].TaskHandler; 	  /* Initialize PC value in Task's stack  */
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <Stack_voidInitTaskStack+0x11c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <Stack_voidInitTaskStack+0x120>)
 8000962:	460b      	mov	r3, r1
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	330c      	adds	r3, #12
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3b04      	subs	r3, #4
 800097a:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = DUMMY_LR ;  /* Initialize LR value in Task's stack  */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f06f 0202 	mvn.w	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
	/*  GPRS  */
	Local_pointer--;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b04      	subs	r3, #4
 8000988:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R12 */
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b04      	subs	r3, #4
 8000994:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R3 */
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b04      	subs	r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R2 */
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b04      	subs	r3, #4
 80009ac:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R1 */
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b04      	subs	r3, #4
 80009b8:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R0 */
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b04      	subs	r3, #4
 80009c4:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R11 */
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b04      	subs	r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R10 */
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b04      	subs	r3, #4
 80009dc:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R9 */
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b04      	subs	r3, #4
 80009e8:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R8 */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b04      	subs	r3, #4
 80009f4:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R7 */
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b04      	subs	r3, #4
 8000a00:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R6 */
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R5 */
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	Local_pointer--;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b04      	subs	r3, #4
 8000a18:	607b      	str	r3, [r7, #4]
	*(Local_pointer) = 0; /* R4 */
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]

	UserTasks[g_TasksNumber].TaskPSP = (u32)Local_pointer;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <Stack_voidInitTaskStack+0x11c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <Stack_voidInitTaskStack+0x120>)
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4403      	add	r3, r0
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	3308      	adds	r3, #8
 8000a36:	601a      	str	r2, [r3, #0]

}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	2000509c 	.word	0x2000509c
 8000a48:	20005034 	.word	0x20005034

08000a4c <RCC_voidInitSysCls>:
/* Parameters in  :    void                                                      */
/* Parameters out :    void                                                      */
/* Description    :    This function init the RCC module                        */
/*********************************************************************************/
void RCC_voidInitSysCls(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

#if RCC_CLK_SRC == HSI  /* Internal clock */

	/* choose system clock */
	CLEAR_BIT(RCC_CFGR,SW0);
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <RCC_voidInitSysCls+0x4c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <RCC_voidInitSysCls+0x4c>)
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CFGR,SW1);
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <RCC_voidInitSysCls+0x4c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <RCC_voidInitSysCls+0x4c>)
 8000a62:	f023 0302 	bic.w	r3, r3, #2
 8000a66:	6013      	str	r3, [r2, #0]

	CLEAR_BIT(RCC_CR , HSEON );
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CR , PLLON );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a7e:	6013      	str	r3, [r2, #0]
	SET_BIT(  RCC_CR , HSION );
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <RCC_voidInitSysCls+0x50>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]

#else
#error "Not suitable clock selected in init"
#endif

}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023808 	.word	0x40023808
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <RCC_voidEnablePerpheralClk>:
/* Parameters in  :    BusID , PerpheralId                                       */
/* Parameters out :    void                                                      */
/* Description    :    This function enable the perpheral clock                  */
/*********************************************************************************/
void RCC_voidEnablePerpheralClk(u8 BusId , u8 PerpheralId )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
	if( BusId > MAX_BUSE_NUMBER || PerpheralId > MAX_PERIPHERAL_PER_BUS )
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d83c      	bhi.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	2b1f      	cmp	r3, #31
 8000aba:	d839      	bhi.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
	{
		/* Do nothing */
	}else
	{
		switch( BusId )
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d836      	bhi.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <RCC_voidEnablePerpheralClk+0x28>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000ad9 	.word	0x08000ad9
 8000acc:	08000aef 	.word	0x08000aef
 8000ad0:	08000b05 	.word	0x08000b05
 8000ad4:	08000b1b 	.word	0x08000b1b
		{
		case AHB1:

			SET_BIT( RCC_AHB1ENR , PerpheralId );
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <RCC_voidEnablePerpheralClk+0x9c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <RCC_voidEnablePerpheralClk+0x9c>)
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
			break;
 8000aec:	e020      	b.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
		case AHB2:
			SET_BIT( RCC_AHB2ENR , PerpheralId );
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <RCC_voidEnablePerpheralClk+0xa0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	4611      	mov	r1, r2
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <RCC_voidEnablePerpheralClk+0xa0>)
 8000afe:	430b      	orrs	r3, r1
 8000b00:	6013      	str	r3, [r2, #0]
			break;
 8000b02:	e015      	b.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
		case APB1:
			SET_BIT( RCC_APB1ENR , PerpheralId );
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <RCC_voidEnablePerpheralClk+0xa4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	79ba      	ldrb	r2, [r7, #6]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <RCC_voidEnablePerpheralClk+0xa4>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6013      	str	r3, [r2, #0]
			break;
 8000b18:	e00a      	b.n	8000b30 <RCC_voidEnablePerpheralClk+0x90>
		case APB2:
			SET_BIT( RCC_APB2ENR , PerpheralId );
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <RCC_voidEnablePerpheralClk+0xa8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	79ba      	ldrb	r2, [r7, #6]
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <RCC_voidEnablePerpheralClk+0xa8>)
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6013      	str	r3, [r2, #0]
			break;
 8000b2e:	bf00      	nop

		}
	}

}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40023830 	.word	0x40023830
 8000b40:	40023834 	.word	0x40023834
 8000b44:	40023840 	.word	0x40023840
 8000b48:	40023844 	.word	0x40023844

08000b4c <Task1>:

#include "GPIO_interface.h"
#include  "RCC_interface.h"

void Task1(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
	RCC_voidInitSysCls();
 8000b52:	f7ff ff7b 	bl	8000a4c <RCC_voidInitSysCls>
	RCC_voidEnablePerpheralClk( AHB1 , GPIOB_ID );
 8000b56:	2101      	movs	r1, #1
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ffa1 	bl	8000aa0 <RCC_voidEnablePerpheralClk>
	GPIO_PIN_CONFIG_T gpio_config = { PORTB_ID , PIN12_ID , GPIO_OUTPUT , 0 , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <Task1+0x54>)
 8000b60:	463b      	mov	r3, r7
 8000b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b66:	6018      	str	r0, [r3, #0]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	8019      	strh	r1, [r3, #0]
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	0c0a      	lsrs	r2, r1, #16
 8000b70:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config );
 8000b72:	463b      	mov	r3, r7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc65 	bl	8000444 <GPIO_voidInti>

	while(1)
	{
		GPIO_voidSetPin( PORTB_ID , PIN12_ID , LOW );
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210c      	movs	r1, #12
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fb28 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 1000 );
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f7ff fd3a 	bl	8000600 <OS_TaskDelay>
		GPIO_voidSetPin( PORTB_ID , PIN12_ID , HIGH );
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	210c      	movs	r1, #12
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fb1f 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 1000 );
 8000b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9a:	f7ff fd31 	bl	8000600 <OS_TaskDelay>
	{
 8000b9e:	e7ec      	b.n	8000b7a <Task1+0x2e>
 8000ba0:	08000d8c 	.word	0x08000d8c

08000ba4 <Task2>:
	}

}

void Task2(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	GPIO_PIN_CONFIG_T gpio_config = { PORTB_ID , PIN13_ID , GPIO_OUTPUT , 0 , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <Task2+0x48>)
 8000bac:	463b      	mov	r3, r7
 8000bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb2:	6018      	str	r0, [r3, #0]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	8019      	strh	r1, [r3, #0]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	0c0a      	lsrs	r2, r1, #16
 8000bbc:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config );
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fc3f 	bl	8000444 <GPIO_voidInti>

	while(1)
	{
		GPIO_voidSetPin( PORTB_ID , PIN13_ID , LOW );
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210d      	movs	r1, #13
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fb02 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 500 );
 8000bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd4:	f7ff fd14 	bl	8000600 <OS_TaskDelay>
		GPIO_voidSetPin( PORTB_ID , PIN13_ID , HIGH );
 8000bd8:	2201      	movs	r2, #1
 8000bda:	210d      	movs	r1, #13
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff faf9 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 500 );
 8000be2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be6:	f7ff fd0b 	bl	8000600 <OS_TaskDelay>
	{
 8000bea:	e7ec      	b.n	8000bc6 <Task2+0x22>
 8000bec:	08000d94 	.word	0x08000d94

08000bf0 <Task3>:
	}
}

void Task3(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0


	GPIO_PIN_CONFIG_T gpio_config = { PORTB_ID , PIN14_ID , GPIO_OUTPUT , 0 , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <Task3+0x44>)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfe:	6018      	str	r0, [r3, #0]
 8000c00:	3304      	adds	r3, #4
 8000c02:	8019      	strh	r1, [r3, #0]
 8000c04:	3302      	adds	r3, #2
 8000c06:	0c0a      	lsrs	r2, r1, #16
 8000c08:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config );
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fc19 	bl	8000444 <GPIO_voidInti>

	while(1)
	{
		GPIO_voidSetPin( PORTB_ID , PIN14_ID , LOW );
 8000c12:	2200      	movs	r2, #0
 8000c14:	210e      	movs	r1, #14
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fadc 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 250 );
 8000c1c:	20fa      	movs	r0, #250	; 0xfa
 8000c1e:	f7ff fcef 	bl	8000600 <OS_TaskDelay>
		GPIO_voidSetPin( PORTB_ID , PIN14_ID , HIGH );
 8000c22:	2201      	movs	r2, #1
 8000c24:	210e      	movs	r1, #14
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fad4 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 250 );
 8000c2c:	20fa      	movs	r0, #250	; 0xfa
 8000c2e:	f7ff fce7 	bl	8000600 <OS_TaskDelay>
	{
 8000c32:	e7ee      	b.n	8000c12 <Task3+0x22>
 8000c34:	08000d9c 	.word	0x08000d9c

08000c38 <Task4>:
	}
}


void Task4(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	GPIO_PIN_CONFIG_T gpio_config = { PORTB_ID , PIN15_ID , GPIO_OUTPUT , 0 , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <Task4+0x44>)
 8000c40:	463b      	mov	r3, r7
 8000c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c46:	6018      	str	r0, [r3, #0]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	8019      	strh	r1, [r3, #0]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	0c0a      	lsrs	r2, r1, #16
 8000c50:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config );
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fbf5 	bl	8000444 <GPIO_voidInti>

	while(1)
	{
		GPIO_voidSetPin( PORTB_ID , PIN15_ID , LOW );
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fab8 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 125 );
 8000c64:	207d      	movs	r0, #125	; 0x7d
 8000c66:	f7ff fccb 	bl	8000600 <OS_TaskDelay>
		GPIO_voidSetPin( PORTB_ID , PIN15_ID , HIGH );
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fab0 	bl	80001d4 <GPIO_voidSetPin>
		OS_TaskDelay( 125 );
 8000c74:	207d      	movs	r0, #125	; 0x7d
 8000c76:	f7ff fcc3 	bl	8000600 <OS_TaskDelay>
	{
 8000c7a:	e7ee      	b.n	8000c5a <Task4+0x22>
 8000c7c:	08000da4 	.word	0x08000da4

08000c80 <IdleTask>:
	}
}

void IdleTask(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

	while(1)
 8000c84:	e7fe      	b.n	8000c84 <IdleTask+0x4>
	...

08000c88 <main>:




int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	OS_Init(  &IdleTask );
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <main+0x3c>)
 8000c8e:	f7ff fc29 	bl	80004e4 <OS_Init>
	OS_CreateTask( 1024 , &Task1 );
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <main+0x40>)
 8000c94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c98:	f7ff fc48 	bl	800052c <OS_CreateTask>
	OS_CreateTask( 1024 , &Task2 );
 8000c9c:	490b      	ldr	r1, [pc, #44]	; (8000ccc <main+0x44>)
 8000c9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ca2:	f7ff fc43 	bl	800052c <OS_CreateTask>
	OS_CreateTask( 1024 , &Task3 );
 8000ca6:	490a      	ldr	r1, [pc, #40]	; (8000cd0 <main+0x48>)
 8000ca8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cac:	f7ff fc3e 	bl	800052c <OS_CreateTask>
	OS_CreateTask( 1024 , &Task4 );
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <main+0x4c>)
 8000cb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cb6:	f7ff fc39 	bl	800052c <OS_CreateTask>

	OS_StartScheduler(10000);
 8000cba:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cbe:	f7ff fce1 	bl	8000684 <OS_StartScheduler>


	for(;;);
 8000cc2:	e7fe      	b.n	8000cc2 <main+0x3a>
 8000cc4:	08000c81 	.word	0x08000c81
 8000cc8:	08000b4d 	.word	0x08000b4d
 8000ccc:	08000ba5 	.word	0x08000ba5
 8000cd0:	08000bf1 	.word	0x08000bf1
 8000cd4:	08000c39 	.word	0x08000c39

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d06:	f000 f811 	bl	8000d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff ffbd 	bl	8000c88 <main>

08000d0e <LoopForever>:

LoopForever:
  b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d1c:	08000db4 	.word	0x08000db4
  ldr r2, =_sbss
 8000d20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d24:	200050a0 	.word	0x200050a0

08000d28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <__libc_init_array>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4d0d      	ldr	r5, [pc, #52]	; (8000d64 <__libc_init_array+0x38>)
 8000d30:	4c0d      	ldr	r4, [pc, #52]	; (8000d68 <__libc_init_array+0x3c>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	2600      	movs	r6, #0
 8000d38:	42a6      	cmp	r6, r4
 8000d3a:	d109      	bne.n	8000d50 <__libc_init_array+0x24>
 8000d3c:	4d0b      	ldr	r5, [pc, #44]	; (8000d6c <__libc_init_array+0x40>)
 8000d3e:	4c0c      	ldr	r4, [pc, #48]	; (8000d70 <__libc_init_array+0x44>)
 8000d40:	f000 f818 	bl	8000d74 <_init>
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	10a4      	asrs	r4, r4, #2
 8000d48:	2600      	movs	r6, #0
 8000d4a:	42a6      	cmp	r6, r4
 8000d4c:	d105      	bne.n	8000d5a <__libc_init_array+0x2e>
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d54:	4798      	blx	r3
 8000d56:	3601      	adds	r6, #1
 8000d58:	e7ee      	b.n	8000d38 <__libc_init_array+0xc>
 8000d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5e:	4798      	blx	r3
 8000d60:	3601      	adds	r6, #1
 8000d62:	e7f2      	b.n	8000d4a <__libc_init_array+0x1e>
 8000d64:	08000dac 	.word	0x08000dac
 8000d68:	08000dac 	.word	0x08000dac
 8000d6c:	08000dac 	.word	0x08000dac
 8000d70:	08000db0 	.word	0x08000db0

08000d74 <_init>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr

08000d80 <_fini>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr
